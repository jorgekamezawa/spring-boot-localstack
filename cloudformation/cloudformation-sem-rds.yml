AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  MyIP:
    Type: String
    Description: "Your IP address in CIDR"
    Default: "152.244.47.254/32"
  Environment:
    Type: String
    Description: "Ambiente em uso"
    Default: aws
    AllowedValues:
      - aws
      - localstack
      - prod
  Region:
    Type: String
    Description: "The currenty region"
    Default: "us-east-1"
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
#          Value: "cloudformation-vpc"
          Value: "formationcloud-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
#          Value: "cloudformation-igw"
          Value: "formationcloud-igw"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.1.1.0/24"
      AvailabilityZone: {
        "Fn::Sub": "${Region}a"
      }
      Tags:
        - Key: Name
          Value: "formationcloud-subnet-public01"

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.1.2.0/24"
      AvailabilityZone: {
        "Fn::Sub": "${Region}b"
      }
      Tags:
        - Key: Name
          Value: "formationcloud-subnet-public02"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "formationcloud-rtb-public"

  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
#      GroupName: "CloudFormationEc2SecurityGroup"
      GroupName: "FormationCloudEc2SecurityGroup"
      GroupDescription: "Security Group for EC2 instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref MyIP
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "RoleEc2AppLocalstack"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "VisualEditor0"
                Effect: "Allow"
                Action:
                  - "sns:*"
                  - "secretsmanager:*"
                  - "s3:*"
                  - "ssm:*"
                  - "sqs:*"
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "ec2-instance-profile"
      Path: /
      Roles:
        - !Ref IAMRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
#      US_WEST_1
      ImageId: "ami-0bd4d695347c0ef88"
#      US_EAST_2
#      ImageId: "ami-0e820afa569e84cc1"
      InstanceType: "t2.micro"
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnet01
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y java-17-amazon-corretto
          sudo yum install git -y
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle
          cd /home/ec2-user
          git clone https://github.com/jorgekamezawa/spring-boot-localstack.git 2>&1
          echo "Git clone exit code: $?"
          cd spring-boot-localstack
          gradle clean build
          java -Dspring.profiles.active=aws -jar build/libs/spring-boot-localstack-0.0.1-SNAPSHOT.jar
      Tags:
        - Key: Name
#          Value: "cloudformation-backend"
          Value: "formationcloud-backend"
      IamInstanceProfile: !Ref EC2InstanceProfile

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: sqsHelloWorld

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: snsHelloWorld

  Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref SNSTopic
      Endpoint: !GetAtt SQSQueue.Arn

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt SQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: helloworld-afb27938-3540-4ace-b6c6-5a69f171334d

  ParameterStoreHelloWorld:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/spring-boot-localstack_${Environment}/helloWorld"
      Value: "Hello World Parameter Store"
      Type: String

  ParameterStoreSQSQueueName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/spring-boot-localstack_${Environment}/sqsQueueName"
      Value: "sqsHelloWorld"
      Type: String

  ParameterStoreSNSNotificationName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/spring-boot-localstack_${Environment}/snsNotificationName"
      Value: "snsHelloWorld"
      Type: String

  ParameterStoreS3BucketName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/spring-boot-localstack_${Environment}/s3BucketName"
      Value: !Ref S3Bucket
      Type: String

  InfraRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/spring-boot-localstack_${Environment}/region"
      Value: !Sub "${Region}"
      Type: String

  SecretsManagerHelloWorld:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "/secrets/helloWorld"
      SecretString: '{"param1": "Hello", "param2": "World"}'